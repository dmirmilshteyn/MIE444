/**********************************************
 ** This is a generated file. Do not modify. **
 **********************************************/

#ifndef MAP_H
#define MAP_H

// Map tiles are stored as a byte array, but should be manipulated as a BIT array.
// This is done to minimize memory usage as the Arduino Uno only has 2048 bytes available.

// Array size = ((MAP_WIDTH / MAP_RESOLUTION) * (MAP_HEIGHT / MAP_RESOLUTION) / 8)
const PROGMEM byte map_tiles[675] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 8, 0, 240, 255, 255, 15, 0, 0, 0, 0, 255, 255, 1, 
252, 255, 255, 255, 0, 0, 0, 6, 252, 255, 63, 252, 0, 24, 128, 
15, 0, 0, 24, 48, 0, 224, 123, 0, 96, 0, 112, 0, 0, 96, 
192, 0, 0, 126, 0, 128, 1, 128, 3, 0, 128, 1, 3, 0, 224, 
3, 0, 6, 0, 28, 0, 0, 6, 12, 0, 0, 12, 0, 24, 0, 
96, 0, 0, 24, 48, 0, 0, 0, 0, 96, 0, 0, 3, 0, 96, 
192, 0, 0, 0, 0, 128, 1, 0, 12, 0, 128, 1, 3, 0, 0, 
0, 0, 6, 0, 112, 0, 0, 6, 28, 0, 0, 0, 0, 24, 0, 
128, 1, 0, 24, 48, 0, 0, 0, 0, 96, 0, 0, 6, 0, 96, 
255, 255, 255, 3, 0, 128, 1, 0, 24, 0, 128, 1, 3, 3, 14, 
0, 0, 6, 0, 96, 0, 0, 6, 12, 12, 56, 0, 0, 24, 0, 
128, 1, 0, 24, 48, 48, 224, 0, 0, 96, 0, 0, 6, 0, 96, 
192, 192, 128, 3, 0, 128, 1, 0, 24, 0, 128, 1, 3, 3, 30, 
0, 0, 6, 0, 96, 0, 0, 6, 12, 12, 248, 0, 0, 24, 0, 
128, 255, 255, 31, 48, 112, 224, 3, 0, 96, 0, 0, 254, 255, 127, 
192, 128, 135, 31, 0, 0, 0, 0, 0, 0, 128, 1, 3, 56, 238, 
0, 0, 0, 0, 0, 0, 0, 6, 12, 192, 59, 3, 0, 0, 0, 
0, 0, 0, 24, 48, 0, 254, 28, 0, 0, 0, 0, 0, 0, 96, 
192, 0, 224, 227, 0, 0, 255, 255, 255, 255, 255, 1, 3, 0, 15, 
3, 0, 254, 255, 255, 255, 255, 7, 12, 0, 48, 28, 0, 62, 128, 
1, 224, 1, 24, 48, 0, 128, 224, 0, 252, 0, 6, 0, 62, 96, 
192, 0, 0, 0, 7, 188, 1, 24, 0, 224, 131, 1, 3, 0, 0, 
24, 56, 6, 96, 0, 0, 62, 6, 12, 0, 0, 224, 120, 24, 128, 
1, 0, 224, 27, 240, 0, 0, 0, 119, 48, 0, 6, 0, 0, 126, 
192, 31, 0, 0, 248, 192, 0, 24, 0, 0, 224, 1, 240, 1, 0, 
240, 0, 3, 96, 0, 0, 0, 6, 0, 15, 0, 224, 7, 14, 128, 
1, 0, 0, 24, 0, 126, 0, 224, 25, 24, 0, 6, 0, 0, 96, 
0, 156, 3, 192, 227, 96, 0, 24, 0, 0, 128, 1, 48, 28, 192, 
3, 135, 1, 96, 0, 0, 0, 6, 224, 96, 128, 3, 56, 7, 128, 
1, 0, 0, 24, 128, 1, 131, 7, 192, 12, 0, 6, 0, 0, 96, 
0, 3, 140, 7, 0, 55, 0, 24, 0, 0, 128, 1, 14, 112, 15, 
0, 248, 0, 96, 0, 0, 0, 6, 24, 128, 15, 0, 192, 3, 128, 
1, 0, 0, 24, 112, 0, 30, 0, 0, 7, 0, 6, 0, 0, 96, 
224, 0, 24, 0, 0, 24, 0, 24, 0, 0, 128, 129, 1, 0, 0, 
0, 64, 0, 96, 0, 0, 0, 6, 7, 0, 0, 0, 0, 0, 128, 
1, 0, 0, 24, 14, 0, 0, 0, 0, 0, 0, 6, 0, 0, 96, 
24, 0, 0, 0, 0, 0, 0, 24, 0, 0, 128, 113, 0, 0, 0, 
0, 0, 0, 96, 0, 0, 0, 198, 0, 0, 0, 0, 0, 0, 128, 
1, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

struct intersection {
  short TopLeft;
  short TopRight;
  short BottomLeft;
  short BottomRight;
};

intersection intersections[0] = {
};

const PROGMEM byte intersection_cost_map[20][20] = {
 { -1, 7, 19, 37, 57, 77, 77, 77, 63, 49, 41, 30, 32, 25, 21, 15, 4, 12, 18, 12 },
 { 9, -1, 19, 37, 57, 77, 77, 77, 63, 49, 41, 30, 39, 35, 31, 25, 6, 12, 18, 17 },
 { 19, 20, -1, 12, 32, 52, 52, 52, 38, 24, 18, 28, 37, 33, 29, 23, 12, 4, 10, 15 },
 { 39, 40, 17, -1, 16, 36, 36, 36, 23, 23, 19, 30, 39, 35, 35, 41, 32, 24, 18, 24 },
 { 60, 61, 38, 20, -1, 15, 15, 15, 6, 10, 16, 27, 26, 45, 56, 62, 53, 45, 39, 45 },
 { 79, 80, 57, 39, 19, -1, 2, 8, 13, 27, 35, 46, 44, 64, 75, 81, 72, 64, 58, 64 },
 { 79, 80, 57, 39, 19, 6, -1, 3, 13, 27, 35, 46, 44, 64, 75, 81, 72, 64, 58, 64 },
 { 80, 81, 58, 40, 20, 13, 6, -1, 14, 28, 36, 47, 45, 65, 76, 82, 73, 65, 59, 65 },
 { 64, 65, 42, 24, 6, 6, 6, 6, -1, 12, 20, 31, 29, 49, 60, 66, 57, 49, 43, 49 },
 { 51, 52, 29, 24, 6, 23, 23, 23, 9, -1, 7, 18, 16, 36, 47, 53, 44, 36, 30, 36 },
 { 40, 41, 22, 24, 15, 35, 35, 35, 21, 7, -1, 7, 13, 25, 36, 42, 33, 25, 19, 25 },
 { 27, 28, 26, 29, 26, 46, 46, 46, 32, 18, 11, -1, 7, 12, 23, 29, 20, 18, 12, 12 },
 { 35, 36, 35, 38, 22, 39, 39, 39, 25, 12, 14, 3, -1, 20, 31, 37, 28, 27, 21, 20 },
 { 25, 34, 36, 39, 43, 63, 63, 63, 49, 35, 27, 16, 18, -1, 7, 13, 28, 28, 22, 17 },
 { 17, 26, 28, 34, 50, 70, 70, 70, 56, 42, 34, 23, 25, 5, -1, 5, 20, 20, 15, 9 },
 { 16, 25, 27, 36, 56, 76, 76, 76, 62, 48, 40, 29, 31, 11, 2, -1, 19, 19, 17, 11 },
 { 7, 8, 11, 29, 49, 69, 69, 69, 55, 41, 33, 22, 29, 25, 21, 15, -1, 4, 10, 7 },
 { 15, 16, 8, 19, 39, 59, 59, 59, 45, 31, 23, 19, 28, 24, 20, 17, 8, -1, 1, 6 },
 { 16, 17, 14, 19, 39, 59, 59, 59, 45, 31, 23, 12, 20, 16, 13, 18, 9, 6, -1, 1 },
 { 14, 17, 19, 24, 40, 60, 60, 60, 46, 32, 24, 13, 20, 14, 10, 16, 11, 11, 6, -1 },
}

#endif
